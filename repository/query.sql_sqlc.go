// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package repository

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createArticle = `-- name: CreateArticle :one
INSERT INTO articles (title, content, tags, publication_date)
VALUES ($1, $2, $3, $4)
RETURNING id
`

type CreateArticleParams struct {
	Title           string
	Content         string
	Tags            []string
	PublicationDate time.Time
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createArticle,
		arg.Title,
		arg.Content,
		pq.Array(arg.Tags),
		arg.PublicationDate,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteArticleByID = `-- name: DeleteArticleByID :one
DELETE FROM articles
WHERE id = $1
RETURNING id, title, content, tags, publication_date
`

type DeleteArticleByIDRow struct {
	ID              int64
	Title           string
	Content         string
	Tags            []string
	PublicationDate time.Time
}

func (q *Queries) DeleteArticleByID(ctx context.Context, id int64) (DeleteArticleByIDRow, error) {
	row := q.db.QueryRowContext(ctx, deleteArticleByID, id)
	var i DeleteArticleByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		pq.Array(&i.Tags),
		&i.PublicationDate,
	)
	return i, err
}

const getAllArticles = `-- name: GetAllArticles :many
SELECT id, title, content, tags, publication_date, created_at, updated_at FROM articles
`

func (q *Queries) GetAllArticles(ctx context.Context) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, getAllArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			pq.Array(&i.Tags),
			&i.PublicationDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArticleByID = `-- name: GetArticleByID :one
SELECT id, title, content, tags, publication_date, created_at, updated_at FROM articles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetArticleByID(ctx context.Context, id int64) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticleByID, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		pq.Array(&i.Tags),
		&i.PublicationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getArticleByTitle = `-- name: GetArticleByTitle :one
SELECT id, title, content, tags, publication_date, created_at, updated_at FROM articles
WHERE title = $1 LIMIT 1
`

func (q *Queries) GetArticleByTitle(ctx context.Context, title string) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticleByTitle, title)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		pq.Array(&i.Tags),
		&i.PublicationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getArticlesByTags = `-- name: GetArticlesByTags :many
SELECT id, title, content, tags, publication_date, created_at, updated_at FROM articles
WHERE tags && $1::text[]
`

func (q *Queries) GetArticlesByTags(ctx context.Context, tags []string) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, getArticlesByTags, pq.Array(tags))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Content,
			pq.Array(&i.Tags),
			&i.PublicationDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticleByID = `-- name: UpdateArticleByID :one
UPDATE articles
SET title = $1,
    content = $2,
    tags = $3,
    publication_date = $4
WHERE id = $5
RETURNING id, title, content, tags, publication_date
`

type UpdateArticleByIDParams struct {
	Title           string
	Content         string
	Tags            []string
	PublicationDate time.Time
	ID              int64
}

type UpdateArticleByIDRow struct {
	ID              int64
	Title           string
	Content         string
	Tags            []string
	PublicationDate time.Time
}

func (q *Queries) UpdateArticleByID(ctx context.Context, arg UpdateArticleByIDParams) (UpdateArticleByIDRow, error) {
	row := q.db.QueryRowContext(ctx, updateArticleByID,
		arg.Title,
		arg.Content,
		pq.Array(arg.Tags),
		arg.PublicationDate,
		arg.ID,
	)
	var i UpdateArticleByIDRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Content,
		pq.Array(&i.Tags),
		&i.PublicationDate,
	)
	return i, err
}
