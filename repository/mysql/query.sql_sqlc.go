// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package mysql

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"
)

const createArticle = `-- name: CreateArticle :execresult
INSERT INTO articles (title, thumbnail, slug, content, tags, publication_date)
VALUES (?, ?, ?, ?, ?, ?)
`

type CreateArticleParams struct {
	Title           string
	Thumbnail       string
	Slug            string
	Content         string
	Tags            json.RawMessage
	PublicationDate time.Time
}

func (q *Queries) CreateArticle(ctx context.Context, arg CreateArticleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createArticle,
		arg.Title,
		arg.Thumbnail,
		arg.Slug,
		arg.Content,
		arg.Tags,
		arg.PublicationDate,
	)
}

const deleteArticleByID = `-- name: DeleteArticleByID :execrows
DELETE FROM articles
WHERE id = ?
`

func (q *Queries) DeleteArticleByID(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteArticleByID, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getAllArticles = `-- name: GetAllArticles :many
SELECT id, title, thumbnail, slug, content, tags, publication_date, created_at, updated_at FROM articles
`

func (q *Queries) GetAllArticles(ctx context.Context) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, getAllArticles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Thumbnail,
			&i.Slug,
			&i.Content,
			&i.Tags,
			&i.PublicationDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllTags = `-- name: GetAllTags :many
SELECT DISTINCT SUBSTRING_INDEX(SUBSTRING_INDEX(tags, ',', numbers.n), ',', -1) AS unique_tag
FROM articles
CROSS JOIN (
    SELECT 1 AS n UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL SELECT 4
) numbers
WHERE tags IS NOT NULL
  AND CHAR_LENGTH(tags) - CHAR_LENGTH(REPLACE(tags, ',', '')) >= numbers.n - 1
ORDER BY unique_tag ASC
`

func (q *Queries) GetAllTags(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAllTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var unique_tag string
		if err := rows.Scan(&unique_tag); err != nil {
			return nil, err
		}
		items = append(items, unique_tag)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getArticleByID = `-- name: GetArticleByID :one
SELECT id, title, thumbnail, slug, content, tags, publication_date, created_at, updated_at FROM articles
WHERE id = ? LIMIT 1
`

func (q *Queries) GetArticleByID(ctx context.Context, id int64) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticleByID, id)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Thumbnail,
		&i.Slug,
		&i.Content,
		&i.Tags,
		&i.PublicationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getArticleBySlug = `-- name: GetArticleBySlug :one
SELECT id, title, thumbnail, slug, content, tags, publication_date, created_at, updated_at FROM articles
WHERE slug = ? LIMIT 1
`

func (q *Queries) GetArticleBySlug(ctx context.Context, slug string) (Article, error) {
	row := q.db.QueryRowContext(ctx, getArticleBySlug, slug)
	var i Article
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Thumbnail,
		&i.Slug,
		&i.Content,
		&i.Tags,
		&i.PublicationDate,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getArticlesByTags = `-- name: GetArticlesByTags :many
SELECT id, title, thumbnail, slug, content, tags, publication_date, created_at, updated_at FROM articles
WHERE JSON_OVERLAPS(tags, CAST(? AS JSON))
`

func (q *Queries) GetArticlesByTags(ctx context.Context, tags json.RawMessage) ([]Article, error) {
	rows, err := q.db.QueryContext(ctx, getArticlesByTags, tags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Thumbnail,
			&i.Slug,
			&i.Content,
			&i.Tags,
			&i.PublicationDate,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateArticleByID = `-- name: UpdateArticleByID :execrows
UPDATE articles
SET title = ?,
    thumbnail = ?,
    slug = ?,
    content = ?,
    tags = ?,
    publication_date = ?
WHERE id = ?
`

type UpdateArticleByIDParams struct {
	Title           string
	Thumbnail       string
	Slug            string
	Content         string
	Tags            json.RawMessage
	PublicationDate time.Time
	ID              int64
}

func (q *Queries) UpdateArticleByID(ctx context.Context, arg UpdateArticleByIDParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, updateArticleByID,
		arg.Title,
		arg.Thumbnail,
		arg.Slug,
		arg.Content,
		arg.Tags,
		arg.PublicationDate,
		arg.ID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
